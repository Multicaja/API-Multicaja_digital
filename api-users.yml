swagger: '2.0'
info:
  description: |
    Bienvenido a la API de [Multicaja](https://www.multicaja.cl) (Alpha)

    ** Este es un proyecto alpha y por lo tanto sufrirá muchos cambios **

    Todos los requests son autenticados usando un `api-key`.

    Existen dos ambientes: `qa` y `producción`. El `host` de `qa` es `apiqa.multicaja.cl`.
  version: '1.0'
  title: API Multicaja (Alpha)
host: 'api.multicaja.cl'
basePath: /v1.0-alpha/
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: registro
    description: Registro de nuevos clientes
  - name: clientes
    description: Administración de clientes
  - name: contacto
    description: Contacto con cliente y validación de sus datos de contacto
  - name: etiquetas
    description: Etiquetas del cliente
  - name: cuentas
    description: Cuentas bancarias de un cliente
  - name: direcciones
    description: Dirección física de un cliente
  - name: parámetros
    description: Listas de parámetros inmutables
paths:
  /users/soft_signup:
    post:
      tags:
        - registro
      summary: Inicia un proceso de pre-registro
      description: |
        Permite registrar a un nuevo cliente que no ha pasado por un proceso de registro formal, dejándolo en estado de `pre-registro`. También se puede usar este método para actualizar los datos de un cliente ya existente en estado de `pre-registro`.
        
        Llamadas permitidas cuando el cliente está en `pre-registro`:
          * POST /users/soft_signup
          * GET  /users/soft_signup/{signup_id}
          * GET  /users/{user_id}
          * POST /users/{user_id}/update_personal_data
          * POST /users/{user_id}/validate_email # sin validation_channel
      parameters:
        - in: body
          name: user_data
          description: RUT y Correo del usuario que quiere obtener una tarjeta
          required: true
          schema:
            $ref: '#/definitions/user_signup_soft_new'
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/user_signup_soft'
        '401':
          description: RUT o email corresponden a Cliente que ya tiene clave y que debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '422':
          description: No viene RUT o no viene email
  /users/soft_signup/{signup_id}:
    get:
      tags:
        - registro
      summary: Obtiene el estado de un proceso de pre-registro
      description: |
        Obtiene el estado de un proceso de registro. Retorna `user_signup`, el que indica qué pasos falta realizar.
      parameters:
        - in: path
          name: signup_id
          description: ID del proceso de registro pendiente
          required: true
          type: "integer"
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/user_signup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '404':
          description: Proceso de registro no existe.
        '410':
          description: Proceso de registro existe, pero expiró. Inicie uno nuevo con `POST /users/user_signup`.
  /users/full_signup:
    post:
      tags:
        - registro
      summary: Inicia un proceso de registro
      description: |
        Inicia un proceso de registro. Retorna `user_signup`, el que indica qué pasos se deben realizar.
        
        Llamadas permitidas cuando el cliente está registrándose:
          * POST /users/full_signup
          * GET  /users/full_signup/{signup_id}
          * GET  /users/{user_id}
          * POST /users/{user_id}/update_personal_data
          * POST /users/{user_id}/validate_rut
          * POST /users/{user_id}/validate_email
          * PUT /users/{user_id}/mail
          * POST /users/{user_id}/validate_cellphone
          * PUT /users/{user_id}/sms
          * POST /users/{user_id}/sign_contract
          * POST /users/{user_id}/update_password # debe ser la última
      parameters:
        - in: body
          name: user_data
          description: RUT y Correo del usuario que quiere obtener una tarjeta
          required: true
          schema:
            $ref: '#/definitions/user_signup_new'
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/user_signup'
        '401':
          description: RUT o email corresponden a Cliente que ya tiene clave y que debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '422':
          description: No viene RUT o no viene email
  /users/full_signup/{signup_id}:
    get:
      tags:
        - registro
      summary: Obtiene el estado de un proceso de registro
      description: |
        Obtiene el estado de un proceso de registro. Retorna `user_signup`, el que indica qué pasos falta realizar.
      parameters:
        - in: path
          name: signup_id
          description: ID del proceso de registro pendiente
          required: true
          type: "integer"
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/user_signup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '404':
          description: Proceso de registro no existe.
        '410':
          description: Proceso de registro existe, pero expiró. Inicie uno nuevo con `POST /users/user_signup`.
  /users/{user_id}/finish_signup:
    post:
      tags:
        - registro
      summary: Termina un proceso de registro
      description: |
        Termina un proceso de registro. Retorna `user`.
        
        Llamadas permitidas cuando el cliente está registrándose:
          * POST /users/full_signup
          * GET  /users/full_signup/{signup_id}
          * GET  /users/{user_id}
          * POST /users/{user_id}/update_personal_data
          * POST /users/{user_id}/validate_rut
          * POST /users/{user_id}/validate_email
          * PUT /users/{user_id}/mail
          * POST /users/{user_id}/validate_cellphone
          * PUT /users/{user_id}/sms
          * POST /users/{user_id}/sign_contract
          * POST /users/{user_id}/update_password # debe ser la última
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/user'
        '401':
          description: RUT o email corresponden a Cliente que ya tiene clave y que debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '422':
          description: No viene RUT o no viene email
  /users/:
    get:
      summary: Buscar
      tags: 
        - clientes
      description: |
        Busca a un cliente por rut, por email o por celular
      parameters:
        - name: "rut"
          in: "query"
          description: "rut sin puntos ni dígito verificador"
          type: integer
        - name: "email"
          in: "query"
          description: "email"
          type: string
        - in: "query"
          name: "cellphone"
          description: "Celular (9 dígitos)"
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        '404':
          description: Cliente no existe
  /users/{user_id}:
    get:
      tags: 
        - clientes
      description: |
        Lee los datos de un cliente.
        ### Notas
        * Incluye los objetos `rut`, `email` y `cellphone`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Cliente borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe
  /users/{user_id}/update_password:
    post:
      tags:
        - clientes
      description: |
        Usuario indica su password
        * Esta llamada fuerza a que futuras acciones del Cliente vengan autenticadas. 
        * Si el cliente se encuentra en un proceso de registro, deje esta llamada para el final.
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: password
          description: Password escogido por el usuario
          required: true
          schema:
            $ref: '#/definitions/user_password_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado
          schema:
            $ref: '#/definitions/user'
        '403':
          description: Cliente borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación (password no cumple con políticas o no se ha completado los pasos anteriores del proceso)
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/check_password:
    post:
      tags:
        - clientes
      description: |
        Usuario indica su password
        * Se realiza una comparación con la contraseña de la base de datos.
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: password
          description: Password escogido por el usuario
          required: true
          schema:
            $ref: '#/definitions/user_password_new'
      responses:
        '200':
          description: |
            OK - Password correcta
        '403':
          description: Cliente borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación (password no cumple con políticas minimas)
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/update_personal_data:
    post:
      tags:
        - clientes
      description: |
        Actualiza datos personales
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: personal_data
          description: Parámetros del usuario a crear
          required: true
          schema:
            $ref: '#/definitions/user_personal_data_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado
          schema:
            $ref: '#/definitions/user'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en datos personales
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/validate_rut:
    post:
      tags:
        - clientes
      description: |
        Valida el número de serie de la cédula
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: rut_validation
          description: Datos de validación de la cédula
          required: true
          schema:
            $ref: '#/definitions/rut_validation_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado
          schema:
            $ref: '#/definitions/user'
        '400':
          description: |
            SRCeI retornó error - ver respuesta
          schema:
            $ref: '#/definitions/error_obj'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en número de serie de la cédula
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/sign_contract:
    post:
      tags:
        - clientes
      description: |
        Acepta términos y condiciones
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: tac_acceptance
          description: Firma de contrato
          required: true
          schema:
            $ref: '#/definitions/contract_signup_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado
          schema:
            $ref: '#/definitions/user'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en tac_acceptance
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/update_email:
    post:
      tags:
        - clientes
      description: |
        Cambia el correo electrónico. Si el antiguo correo está validado, debe incluirse el parámetro `update_email.validation_channel`.
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: update_email
          description: Nuevo correo
          required: true
          schema:
            $ref: '#/definitions/update_email_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado. (Sólo responderá `201` si el Cliente no tenía correo o si no estaba validado)
          schema:
            $ref: '#/definitions/user'
        '202':
          description: |
            Cambio pendiente - llame a `PUT /users/sms` o a `PUT /users/email` para completar el cambio (dependiendo del canal que haya escogido en `update_cellphone.validation_channel`)
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en update_email
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/update_cellphone:
    post:
      tags:
        - clientes
      description: |
        Registra el celular o, en caso de existir, los cambia por otro. En este caso, si el Cliente tiene el celular validado, debe incluirse el parámetro `update_cellphone.validation_channel`.
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: update_cellphone
          description: Nuevo celular
          required: true
          schema:
            $ref: '#/definitions/update_cellphone_new'
      responses:
        '201':
          description: |
            OK - cambio aplicado. (Sólo responderá `201` si el Cliente no tenía celular o si no estaba validado)
          schema:
            $ref: '#/definitions/user'
        '202':
          description: |
            Cambio pendiente - llame a `PUT /users/sms` o a `PUT /users/email` para completar el cambio (dependiendo del canal que haya escogido en `update_cellphone.validation_channel`)
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/error_obj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en update_cellphone
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/mail:
    post:
      summary: Enviar correo
      tags: 
        - contacto
      description: |
        Envía una comunicación o código de validación al email del cliente

        ### Notas
        * Si el `template` requiere datos mínimos, debe incluirse estos datos en formato JSON mediante el campo `template_data`
        * La validación del email se logra enviando un código de validación mendiante el uso de un template destinado para ello.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: mail
          description: Correo electrónico a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de correo electrónico a enviar
                example: "Prepago/ValidacionCorreo"
              template_data:
                type: string
                description: JSON con tantos pares llave-valor como requiera el template del correo a enviar
                example: "{'saludo': 'Estimado Pepito', 'despedida': 'Chao!'}"
              address:
                type: string
                description: Correo electrónico al que se enviará este mensaje. Si no se incluye este campo, se usará el campo `email.value`  del Cliente.
                example: "pepito@gmail.com"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El mail contiene datos inválidos
          schema:
            $ref: '#/definitions/error_obj'
    put:
      summary: Validar código enviado por correo
      tags: 
        - contacto
      description: |
        Valida un código enviado mediante POST a `/users/{user_id}/email`
        ### Notas
        * Sólo invocar este método para validar un código enviado previamente mediante `POST /users/{user_id}/email`, `POST /users/{user_id}/validate_cellphone` o `POST /users/{user_id}/validate_email`
        * Si esta el código fue generado por `POST /users/{user_id}/validate_cellphone` o `POST /users/{user_id}/validate_email` y se ingresa correctamente, este método cambiará el estado de `email.status` o `cellphone.status` a `validado`.
        * Si el código ingresado no corresponde al que fue enviado al cliente, el servicio retornará `422`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: email_code
          description: Código ingresado por el cliente
          required: true
          schema:
            type: integer
            example: "123456"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El código ingresado no es válido
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/sms:
    post:
      summary: Enviar sms
      tags: 
        - contacto
      description: |
        Permite mandar un mensaje por sms al cliente
        ### Notas
        * Sólo incluir `cellphone` si el usuario ya tiene celular e intenta cambiarlo
        * Si el `template` requiere datos mínimos, debe incluirse estos datos en formato JSON mediante el campo `template_data`
        * Si el cliente indica no haber recibido el sms, reintente el envío cambiando `gateway` por `"secondary"`
        * No intente enviar códigos de validación a mano. Use un `template` que lo soporte.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: sms
          description: SMS a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de sms a enviar
                example: "Prepago/ValidacionCelular"
              gateway:
                type: string
                enum:
                  - primary
                  - secondary
                description: |
                  Gateway por el que se enviará el SMS
                  * primary: Gateway primaria (default)
                  * secondary: Gateway secundaria, usar sólo si el cliente dice no haber recibido el SMS
              cellphone:
                type: string
                description: Celular al que se enviará este mensaje. Corresponde a los 9 números que siguen a '+56'.  Si no se incluye este campo, se usará el campo `cellphone.value`  del Cliente.
                example: "912345678"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El sms contiene datos inválidos
          schema:
            $ref: '#/definitions/error_obj'
    put:
      summary: Validar código sms
      tags: 
        - contacto
      description: |
        Valida un código enviado mediante POST a `/users/{user_id}/sms`
        ### Notas
        * Sólo invocar este método para validar un código enviado previamente mediante `POST /users/{user_id}/sms`, `POST /users/{user_id}/validate_cellphone` o `POST /users/{user_id}/validate_email`
        * Si esta el código fue generado por `POST /users/{user_id}/validate_cellphone` o `POST /users/{user_id}/validate_email` y se ingresa correctamente, este método cambiará el estado de `email.status` o `cellphone.status` a `validado`.
        * Si el código ingresado no corresponde al que fue enviado al cliente, el servicio retornará `422`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: sms_code
          description: Código ingresado por el cliente
          required: true
          schema:
            type: integer
            example: "123456"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El código ingresado no es válido
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/bank_accounts:
    get:
      summary: Listar
      tags: 
        - cuentas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/bank_account'
        '404':
          description: Cliente no existe
    post:
      summary: Crear
      tags: 
        - cuentas
      description: |
        Crea una nueva cuenta bancaria para este cliente
        
        * La terna (`account.bank_id`, `account.acc_type`, `account.acc_number`) debe ser única para este usuario. De lo contrario, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: account
          description: Cuenta bancaria
          required: true
          schema:
            $ref: '#/definitions/bank_account_new'
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/bank_account'
        '404':
          description: Cliente no existe
        '405':
          description: La cuenta ya existe
        '422':
          description: La cuenta contiene datos inválidos
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/bank_accounts/{acc_id}:
    delete:
      summary: Eliminar
      tags: 
        - cuentas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: path
          name: acc_id
          description: ID de la cuenta
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
        '404':
          description: Cliente o Cuenta no existen
  /users/{user_id}/tags:
    get:
      summary: Listar
      tags: 
        - etiquetas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/tag'
        '404':
          description: Cliente no existe
    post:
      summary: Crear
      tags: 
        - etiquetas
      description: |
        Crea una nueva etiqueta para este cliente. Si el `tag_code` ya existe arroja `405`.
        
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: tag
          description: Etiqueta
          required: true
          schema:
            $ref: '#/definitions/tag_new'
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/tag'
        '404':
          description: Cliente no existe
        '405':
          description: La etiqueta ya existe
        '422':
          description: |
            La etiqueta contiene datos inválidos

            Nota: `attribute_code` debe pertenecer a `/params/users/tags`
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/tags/{tag_id}:
    delete:
      summary: Eliminar
      tags: 
        - etiquetas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: path
          name: tag_id
          description: ID de la etiqueta
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
        '404':
          description: Cliente o etiqueta no existen
  /users/{user_id}/addresses:
    get:
      summary: Listar
      tags: 
        - direcciones
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/address'
        '404':
          description: Cliente no existe
    post:
      summary: Crear
      tags: 
        - direcciones
      description: |
        Crea una nueva dirección para este cliente
        
        * La terna (`address.line_1`, `address.commune`, `address.region`) debe ser única para este usuario. De lo contrario, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: address
          description: Dirección
          required: true
          schema:
            $ref: '#/definitions/address_new'
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/address'
        '404':
          description: Cliente no existe
        '405':
          description: La dirección ya existe
        '422':
          description: La dirección contiene datos inválidos
          schema:
            $ref: '#/definitions/error_obj'
  /users/{user_id}/addresses/{addr_id}:
    delete:
      summary: Eliminar
      tags: 
        - direcciones
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: path
          name: addr_id
          description: ID de la dirección
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
        '404':
          description: Cliente o Dirección no existen 
  /helpers/banks:
    get:
      summary: Lista bancos
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/parameter'
  /helpers/communes:
    get:
      summary: Lista comunas
      tags: 
        - parámetros
      parameters:
        - name: "region"
          in: "query"
          description: "id de region para busqueda"
          required: false
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/parameter'
  /helpers/regions:
    get:
      summary: Lista regiones
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/parameter'
  /helpers/commercial_activity:
    get:
      summary: Lista giros comerciales
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/parameter'
  /helpers/user/tags:
    get:
      summary: Lista de etiquetas que pueden aplicar a un cliente
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/parameter'         
definitions:
  user_signup_new:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Request)**
    properties:
      email:
        type: string
        description: email del prospecto de cliente
        example: "pepito@gmail.com"
      rut:
        type: integer
        description: rut del prospecto de cliente, sin puntos, guión ni DV
        example: 15776844
  user_signup_soft_new:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Request)**
    allOf:
      - $ref: "#/definitions/user_signup_new"
  user_signup_soft:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Response)**
    allOf:
      - $ref: "#/definitions/user_signup_soft_new"
      - type: object
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          user_id:
            type: integer
            description: Identificador del Cliente involucrado en este proceso de registro
            example: 9012331
          name:
            type: string
            description: Nombre o nombres de pila. Si vienen, mostrarlos en la pantalla de datos personales.
            example: "Juan Carlos"
          lastname_1:
            type: string
            description: Apellido paterno Si vienen, mostrarlos en la pantalla de datos personales.
            example: "López"
          must_validate_email:
            type: string
            description: Siempre `false`
            example: false
          must_accept_terms_and_conditions:
            type: string
            description: Siempre `false`
            example: false
          must_choose_password:
            type: string
            description: Siempre `false`
            example: false
          timestamps:
            $ref: '#/definitions/timestamps'
  user_signup:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Response)**
    allOf:
      - $ref: "#/definitions/user_signup_new"
      - type: object
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          user_id:
            type: integer
            description: Identificador del Cliente involucrado en este proceso de registro
            example: 9012331
          name:
            type: string
            description: Nombre o nombres de pila. Si vienen, mostrarlos en la pantalla de datos personales.
            example: "Juan Carlos"
          lastname_1:
            type: string
            description: Apellido paterno Si vienen, mostrarlos en la pantalla de datos personales.
            example: "López"
          terms_and_conditions_list:
            type: array
            items:
              type: string
              description: Link a los términos y condiciones que se deben desplegar para este usuario
              example: 'https://multicaja.cl/tac/contract-v1.3.1.html'
          must_validate_email:
            type: string
            description: Booleano. Si es `true`, el cliente requiere pasar por una validación de correo.
            example: true
          must_accept_terms_and_conditions:
            type: string
            description: Booleano. Si es `true`, el cliente requiere pasar por una aceptación de los últimos términos y condiciones.
            example: true
          must_choose_password:
            type: string
            description: Booleano. Si es `true`, el cliente requiere escoger un password.
            example: true
          timestamps:
            $ref: '#/definitions/timestamps'
  user_personal_data_new:
    type: object
    description: |
      Datos personales **(Request)**
    properties:
      name:
        type: string
        description: Nombre o nombres de pila. Si vienen, mostrarlos en la pantalla de datos personales.
        example: "Juan Carlos"
      lastname_1:
        type: string
        description: Apellido paterno Si vienen, mostrarlos en la pantalla de datos personales.
        example: "López"
  user_password_new:
    type: object
    description: |
      Clave Multicaja Personas **(Request)**
    properties:
      value:
        type: string
        description: 4 dígitos no consecutivos ni iguales, y que no correspondan a ninguna parte del RUT
  update_email_new:
    type: object
    description: |
      Modificación de correo electrónico **(Request)**
    properties:
      email:
        type: string
        description: email del prospecto de cliente
        example: "pepito@gmail.com"
      validation_channel:
        type: string
        enum: ["C", "E"]
        description: |
          Indica por qué canal se hará la validación con doble factor. Este parámetro es requerido si el cliente tiene su correo validado.
          * C: Celular
          * E: email
  update_cellphone_new:
    type: object
    description: |
      Modificación de celular **(Request)**
    properties:
      cell_phone:
        type: integer
        description: celular del prospecto de cliente
        example: 56912345678
      validation_channel:
        type: string
        enum: ["C", "E"]
        description: |
          Indica por qué canal se hará la validación con doble factor. Este parámetro es requerido si el cliente tiene su celular validado.
          * C: Celular
          * E: email
  contract_signup_new:
    type: object
    description: |
      Aceptación de últimos términos y condiciones **(Request)**
    properties:
      # lista de contratos firmados por el cliente
      terms_and_conditions_list:
        type: array
        items:
          type: string
          description: Link a los términos y condiciones que se deben desplegar para este usuario
          example: 'https://multicaja.cl/tac/contract-v1.3.1.html'
  rut_validation_new:
    type: object
    description: |
      Validación de cédula **(Request)**
    properties:
      serial_number:
        type: string
        description: Número de serie o número de documento
        example: "A026588780"
  user_basic_fields:
    type: object
    description: |
      Nombre, Sexo, y Fecha de nacimiento de una persona **(Resquest)** / **(Response)**
      Padre de `user` y `Newuser`
      **No se usa de manera independiente en la API**
    properties:
      name:
        type: string
        description: Nombre o nombres de pila
        example: "Juan Carlos"
      lastname_1:
        type: string
        description: Apellido paterno
        example: "López"
      lastname_2:
        type: string
        description: Apellido materno
        example: "Carrasco"
      gender:
        type: string
        enum: ["M", "F", "N"]
        description: |
          Sexo de la persona
          * M: Masculino
          * F: Femenino
          * N: Otro / prefiere no responder
      birthday:
        type: string
        format: date
        description: Fecha de nacimiento
        example: "1977-1-14"
  user:
    type: object
    description: |
      Cliente **(Response)**

      * Este objeto representa tanto a una persona natural como a una empresa
      * Si el RUT es inferior a 50.000.000, corresponde a Persona Natural y `company_data` deberá ser `null`.
      * Si el RUT es igual o superior a 50.000.000, corresponde a Empresa y `company_data` es obligatorio
    allOf:
      - $ref: "#/definitions/user_basic_fields"
      - type: object
        required:
          - id 
          - rut
          - email
          - timestamps
          - global_status
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          rut:
            $ref: '#/definitions/rut'
          cellphone:
            $ref: '#/definitions/cellphone'
          email:
            $ref: '#/definitions/email'
          company_data:
            $ref: "#/definitions/company_data"
          global_status:
            type: string
            enum:
              - ACTIVE
              - DELETE
              - DISABLED
              - LOCKED
              - PREREGISTERED
            description: |
              Estado del cliente. Campo read-only.
              * "PREREGISTERED": cliente no posee password
              * "ACTIVE": cliente con password que puede transar
              * "LOCKED": cuenta temporalmente congelada
              * "DELETE": eliminación lógica del cliente, no admite ningún cambio
          is_blacklisted:
            type: boolean
            description: |
              Indica si el usuario esta en alguna lista negra 
            example: true
          has_password:
            type: boolean
            description: |
              - `true` si el usuario tiene `password`
              - `false` en otro caso
            example: true
          timestamps:
            $ref: '#/definitions/timestamps'
  rut:
    type: object
    description: |
      Identificador Chileno **(Response)**
    required:
      - status
      - timestamps
    properties:
      value:
        type: integer
        description: El rut sin puntos, guión, ni dígito verificador
        example: 14569484
      dv:
        type: string
        description: digito verificador
        example: "K"
      status:
        type: string
        enum:
          - no_validado
          - validado_srcei
          - validado_tef
        description: |
          Estado de validación del rut
          * no_validado: el rut no ha sido validado o las validaciones no han sido exitosas
          * validado_srcei: el rut fue validado exitosamente contra el registro civil
          * validado_tef: la validación más fuerte, ya que el usuario ha realizado un aviso de depósito seguido de una transferencia desde una cuenta correspondiente a su rut
      timestamps:
            $ref: '#/definitions/timestamps'
  email:
    type: object
    description: |
      Correo Electrónico **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      value:
        type: string
        format: email
        example: "pepito@gmail.com"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del email
          * no_validado: el email no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un correo de validación, pero el usuario no ha hecho clic en el link
          * validado: el usuario demostró tener acceso a la casilla haciendo clic en un link enviado a ésta
      timestamps:
            $ref: '#/definitions/timestamps'
  cellphone:
    type: object
    description: |
      Teléfono Celular **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      value:
        type: string
        description: Los 9 números que siguen a '+56'
        example: "912345678"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del celular
          * no_validado: el celular no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un sms de validación, pero el usuario no ha usado el código
          * validado: el usuario demostró tener acceso al celular usando el código enviado a éste
      timestamps:
        $ref: '#/definitions/timestamps'
  company_data:
    type: object
    description: |
      Datos de la empresa a la que corresponde este Cliente **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      business_name:
        type: string
        description: Nombre legal de la empresa
        example: "Reparaciones Joselito Ltda."
      commercial_activity:
        type: integer
        example: 772
        description: ID del giro (ver /params/giros)
      status:
        type: string
        enum:
          - no_validado
          - validado_sii
        description: |
          Estado de validación de la razón social (business_name)
          * no_validado: la razón social no ha sido validada
          * validado_sii: la razón social fue validada mediante el SII
      timestamps:
            $ref: '#/definitions/timestamps'
  tag_new:
    type: object
    description: |
      Asocia una etiqueta al Cliente **(Request)**
    required: 
      - attribute_code
    properties:
      attribute_code:
        type: integer
        description: |
          Identificador de la etiqueta

          Ver `/params/user/tags`
        example: 56
  tag:
    type: object
    description: |
      Indica si el Cliente posee una etiqueta **(Response)**
    allOf:
      - $ref: "#/definitions/tag_new"
      - type: object
        required:
          - id
          - name
          - timestamps
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 983
          name:
            type: string
            description: Nombre de la etiqueta
            example: "cliente.regulador.es_pep"
          timestamps:
            $ref: '#/definitions/timestamps'
  timestamps:
    type: object
    description: |
      Fecha de creación y de última modificación **(Response)**
      Componente de `address`, `user`, `rut` y otros objetos

      **No se usa de manera independiente en la API**
    properties:
      created_at:
        type: string
        format: date-time
        example: "2018-01-14T15:27:42.669Z"
      updated_at:
        type: string
        format: date-time
        example: "2018-03-02T10:03:12.123Z"
  address_new:
    type: object
    description: Dirección física **(Request)**
    required:
      - line_1
    properties:
      alias:
        type: string
        description: Nombre que el usuario le da a esta dirección
        example: "Casa"
      line_1:
        type: string
        description: Lo que se une a región y comuna para determinar el código postal
        example: Suecia 1414
      line_2:
        type: string
        description: Información adicional como número de departamento. No afecta el código postal.
        example: Depto 502
      region_id:
        type: integer
        example: 13
        description: ID de la comuna (ver /params/regions)
      commune_id:
        type: integer
        example: 230
        description: ID de la comuna (ver /params/communes)
      postal_code:
        type: string
        description: Identificador de (`address.line_1`, `address.commune`, `address.region`)
        example: 7710787
  address:
    type: object
    description: Dirección física **(Response)**
    allOf:
      - $ref: "#/definitions/address_new"
      - type: object
        required:
          - id
          - timestamps
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          timestamps:
            $ref: '#/definitions/timestamps'
  bank_account_new:
    type: object
    description: Cuenta bancaria personal **(Request)**
    required:
      - bank_id
      - acc_type
      - acc_number
    properties:
      bank_id:
        type: integer
        description: ID del banco (revisar /params/banks)
        example: 4
      acc_type:
        type: string
        description: Tipo de cuenta
        enum:
          - vista
          - corriente
          - ahorro
      acc_number:
        type: string
        description: Número de cuenta sin puntos, guiones, ni ceros a la izquierda
  bank_account:
    type: object
    description: Cuenta bancaria personal **(Response)**
    allOf:
      - $ref: "#/definitions/bank_account_new"
      - type: object
        required:
          - id
          - status
          - timestamps
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          bank_id:
            type: integer
            description: ID del banco (revisar /params/banks)
            example: 4
          acc_type:
            type: string
            description: Tipo de cuenta
            enum:
              - vista
              - corriente
              - ahorro
          acc_number:
            type: string
            description: Número de cuenta sin puntos, guiones, ni ceros a la izquierda
          status:
            type: string
            enum:
              - no_validada
              - validada
            description: |
              Estado de validación de la cuenta
              * no_validada: estado por defecto
              * validada: el usuario hizo una aviso de depósito seguido de una transferencia desde esta cuenta
          timestamps:
            $ref: '#/definitions/timestamps'
  parameter:
    type: object
    required:
      - id
      - value
    description: Parámetro básico **(Response)**
    properties:
      id:
        type: integer
        description: identificador del parámetro
      value:
        type: string
        description: nombre del parámetro
      desc:
        type: string
        description: descripción del parámetro
  error_obj:
    type: object
    description: Error que devuelve la api ante un `HTTP 422` **(Response)**
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
        description: Código que representa el error. No será igual al código HTTP.
        example: 1024
      message:
        type: string
        description: Descripción corta del error
        example: "El cliente no pasó la validación"
