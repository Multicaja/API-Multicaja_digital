swagger: '2.0'
info:
  description: |
    Bienvenido a la API de [Multicaja](https://www.multicaja.cl) (Alpha)

    ** Este es un proyecto alpha y por lo tanto sufrirá muchos cambios **

    Todos los requests son autenticados usando un `api-key`.

    Existen dos ambientes: `qa` y `producción`. El `host` de `qa` es `apiqa.multicaja.cl`.
  version: '0.6'
  title: API Multicaja (Alpha)
host: 'api.multicaja.cl'
basePath: /v0.6-alpha/
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: clientes
    description: Administración de clientes
  - name: contacto
    description: Contacto con cliente y validación de sus datos de contacto
  - name: prepaid
    description: Registro de prepago
paths:
  /prepaid/UserSignup:
    post:
      tags:
        - prepaid
      description: |
        Inicia un proceso de registro para obtener la tarjeta de prepago. Retorna `PrepaidUserSignup`, el que indica qué pasos se deben realizar.
      parameters:
        - in: body
          name: user_data
          description: RUT y Correo del usuario que quiere obtener una tarjeta
          required: true
          schema:
            $ref: '#/definitions/PrepaidUserSignupNew'
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/PrepaidUserSignup'
        '401':
          description: RUT o email corresponden a Cliente que ya tiene clave y que debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado, bloqueado, o ya tiene prepago.
          schema:
            $ref: '#/definitions/ErrorObj'
        '404':
          description: Cliente no existe
        '410':
          description: Cliente ya tiene prepago
        '422':
          description: No viene RUT o no viene email
  /prepaid/SignUp/{signup_id}:
    get:
      tags:
        - prepaid
      description: |
        Obtiene el estado de un proceso de registro para obtener la tarjeta de prepago. Retorna `PrepaidUserSignup`, el que indica qué pasos falta realizar.
      parameters:
        - in: path
          name: signup_id
          description: ID del proceso de registro pendiente
          required: true
          type: "integer"
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan y qué información puede mostrar pre llenada.
          schema:
            $ref: '#/definitions/PrepaidUserSignup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '404':
          description: Proceso de registro no existe.
        '410':
          description: Proceso de registro existe, pero expiró. Inicie uno nuevo con `POST /prepaid/UserSignup`.
  /users/{user_id}/PasswordSetup:
    put:
      tags:
        - clientes
      description: |
        Usuario indica su password
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: password
          description: Password escogido por el usuario
          required: true
          schema:
            $ref: '#/definitions/UserPasswordNew'
      responses:
        '201':
          description: |
            OK - Proceso de registro completado
          schema:
            $ref: '#/definitions/User'
        '403':
          description: Cliente borrado o bloqueado
          schema:
            $ref: '#/definitions/ErrorObj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación (password no cumple con políticas o no se ha completado los pasos anteriores del proceso)
          schema:
            $ref: '#/definitions/ErrorObj'
  /users/{user_id}/PersonalData:
    post:
      tags:
        - clientes
      description: |
        Escribe datos personales de quien se está registrado
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: personal_data
          description: Parámetros del usuario a crear
          required: true
          schema:
            $ref: '#/definitions/PrepaidUserPersonalDataNew'
      responses:
        '201':
          description: OK - Datos personales guardados, puede continuar
          schema:
            $ref: '#/definitions/PrepaidUserSignup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/ErrorObj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en datos personales
          schema:
            $ref: '#/definitions/ErrorObj'
  /users/{user_id}/ValidateRut:
    post:
      tags:
        - clientes
      description: |
        Valida el número de serie de la cédula
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: rut_validation
          description: Datos de validación de la cédula
          required: true
          schema:
            $ref: '#/definitions/RutValidationNew'
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan
          schema:
            $ref: '#/definitions/PrepaidUserSignup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/ErrorObj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en número de serie de la cédula
          schema:
            $ref: '#/definitions/ErrorObj'
  /users/{user_id}/TermsAndConditionsAcceptance:
    post:
      tags:
        - clientes
      description: |
        Acepta términos y condiciones
      parameters:
        - in: path
          name: user_id
          description: ID del Cliente
          required: true
          type: "integer"
        - in: body
          name: tac_acceptance
          description: Firma de contrato
          required: true
          schema:
            $ref: '#/definitions/ContractSignupNew'
      responses:
        '201':
          description: |
            OK - Consulte objeto de respuesta para saber qué pasos faltan
          schema:
            $ref: '#/definitions/PrepaidUserSignup'
        '401':
          description: Usuario tiene clave y debe autenticarse para realizar esta operación
        '403':
          description: Usuario borrado o bloqueado
          schema:
            $ref: '#/definitions/ErrorObj'
        '404':
          description: Cliente no existe.
        '422':
          description: Error de validación en tac_acceptance
          schema:
            $ref: '#/definitions/ErrorObj'
  /users/{user_id}/mail:
    post:
      summary: Enviar correo
      tags: 
        - contacto
      description: |
        Envía una comunicación o código de validación al email del cliente

        ### Notas
        * Si el `template` requiere datos mínimos, debe incluirse estos datos en formato JSON mediante el campo `template_data`
        * La validación del email se logra enviando un código de validación mendiante el uso de un template destinado para ello.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: mail
          description: Correo electrónico a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de correo electrónico a enviar
                example: "Prepago/ValidacionCorreo"
              template_data:
                type: string
                description: JSON con tantos pares llave-valor como requiera el template del correo a enviar
                example: "{'saludo': 'Estimado Pepito', 'despedida': 'Chao!'}"
              address:
                type: string
                description: Correo electrónico al que se enviará este mensaje. Si no se incluye este campo, se usará el campo `email.value`  del Cliente.
                example: "pepito@gmail.com"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El mail contiene datos inválidos
          schema:
            $ref: '#/definitions/ErrorObj'
    put:
      summary: Validar código enviado por correo
      tags: 
        - contacto
      description: |
        Valida un código enviado mediante POST a `/users/{user_id}/email`
        ### Notas
        * Sólo invocar este método para validar email si se ha enviado previamente un código por email haciendo POST a `/users/{user_id}/email`
        * Dependiendo del template usado en el POST a `/users/{user_id}/email`, esta llamada podría cambiar `email.status` a `"validado"`. Esto ocurrirá sólo si el código proporcionado corresponde al que fue enviado al email`.
        * Si el código ingresado no corresponde al que fue enviado al cliente, el servicio retornará `422`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: email_code
          description: Código ingresado por el cliente
          required: true
          schema:
            type: integer
            example: "123456"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El código ingresado no es válido
          schema:
            $ref: '#/definitions/ErrorObj'
  /users/{user_id}/sms:
    post:
      summary: Enviar sms
      tags: 
        - contacto
      description: |
        Permite mandar un mensaje por sms al cliente
        ### Notas
        * Sólo incluir `cellphone` si el usuario ya tiene celular e intenta cambiarlo
        * Si el `template` requiere datos mínimos, debe incluirse estos datos en formato JSON mediante el campo `template_data`
        * Si el cliente indica no haber recibido el sms, reintente el envío cambiando `gateway` por `"secondary"`
        * No intente enviar códigos de validación a mano. Use un `template` que lo soporte.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: sms
          description: SMS a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de sms a enviar
                example: "Prepago/ValidacionCelular"
              gateway:
                type: string
                enum:
                  - primary
                  - secondary
                description: |
                  Gateway por el que se enviará el SMS
                  * primary: Gateway primaria (default)
                  * secondary: Gateway secundaria, usar sólo si el cliente dice no haber recibido el SMS
              cellphone:
                type: string
                description: Celular al que se enviará este mensaje. Corresponde a los 9 números que siguen a '+56'.  Si no se incluye este campo, se usará el campo `cellphone.value`  del Cliente.
                example: "912345678"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El sms contiene datos inválidos
          schema:
            $ref: '#/definitions/ErrorObj'
    put:
      summary: Validar código sms
      tags: 
        - contacto
      description: |
        Valida un código enviado mediante POST a `/users/{user_id}/sms`
        ### Notas
        * Sólo invocar este método para validar celular si se ha enviado previamente un código por SMS haciendo POST a `/users/{user_id}/sms`
        * Dependiendo del template usado en el POST a `/users/{user_id}/sms`, esta llamada podría cambiar `cellphone.status` a `"validado"`. Esto ocurrirá sólo si el código proporcionado corresponde al que fue enviado al celular`.
        * Si el código ingresado no corresponde al que fue enviado al cliente, el servicio retornará `422`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: sms_code
          description: Código ingresado por el cliente
          required: true
          schema:
            type: integer
            example: "123456"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: El código ingresado no es válido
          schema:
            $ref: '#/definitions/ErrorObj'
definitions:
  UserPasswordNew:
    type: object
    description: |
      Clave Multicaja Personas **(Request)**
    properties:
      value:
        type: string
        description: 4 dígitos no consecutivos ni iguales, y que no correspondan a ninguna parte del RUT
  ContractSignupNew:
    type: object
    description: |
      Aceptación de últimos términos y condiciones **(Request)**
    properties:
      acceptance:
        type: string
        description: Booleano. `true` si el cliente aceptó.
        example: "true"
  RutValidationNew:
    type: object
    description: |
      Validación de cédula **(Request)**
    properties:
      serial_number:
        type: string
        description: Número de serie o número de documento
        example: "A026588780"
  PrepaidUserPersonalDataNew:
    type: object
    description: |
      Ciente en proceso de registro para un prepago **(Request)**
    properties:
      name:
        type: string
        description: Nombre o nombres de pila. Si vienen, mostrarlos en la pantalla de datos personales.
        example: "Juan Carlos"
      lastname_1:
        type: string
        description: Apellido paterno Si vienen, mostrarlos en la pantalla de datos personales.
        example: "López"
  UserSignupNew:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Request)**
    properties:
      email:
        type: string
        description: email del prospecto de cliente
        example: "pepito@gmail.com"
      rut:
        type: integer
        description: rut del prospecto de cliente, sin puntos, guión ni DV
        example: 15776844
  PrepaidUserSignupNew:
    type: object
    description: |
      Solicitud de registro de un Cliente Prepago **(Request)**
    allOf:
      - $ref: "#/definitions/UserSignupNew"
  UserSignup:
    type: object
    description: |
      Solicitud de registro de un Cliente Multicaja.cl **(Response)**
    allOf:
      - $ref: "#/definitions/UserSignupNew"
      - type: object
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          name:
            type: string
            description: Nombre o nombres de pila. Si vienen, mostrarlos en la pantalla de datos personales.
            example: "Juan Carlos"
          lastname_1:
            type: string
            description: Apellido paterno Si vienen, mostrarlos en la pantalla de datos personales.
            example: "López"
          terms_and_conditions_uri:
            type: string
            description: Link a los términos y condiciones que se deben desplegar para este usuario
            example: 'https://multicaja.cl/tac/contract-v1.3.1.html'
          must_validate_email:
            type: string
            description: Booleano. Si es `true`, el cliente requiere pasar por una validación de correo.
            example: true
          must_accept_terms_and_conditions:
            type: string
            description: Booleano. Si es `true`, el cliente requiere pasar por una aceptación de los últimos términos y condiciones.
            example: true
          must_choose_password:
            type: string
            description: Booleano. Si es `true`, el cliente requiere escoger un password.
            example: true
          timestamps:
            $ref: '#/definitions/Timestamps'
  PrepaidUserSignup:
    type: object
    description: |
      Ciente en proceso de registro para un prepago **(Response)**
    allOf:
      - $ref: "#/definitions/UserSignup"
      - type: object
        properties:
          cellphone:
            type: integer
            description: Número de celular de 9 dígitos.
            example: 912345678
          must_validate_rut:
            type: string
            description: Booleano
            example: true
          must_validate_cellphone:
            type: string
            description: Booleano. Si es `true`, el cliente requiere pasar por una validación de celular.
            example: true
  UserBasicFields:
    type: object
    description: |
      Nombre, Sexo, y Fecha de nacimiento de una persona **(Resquest)** / **(Response)**
      Padre de `User` y `NewUser`
      **No se usa de manera independiente en la API**
    properties:
      name:
        type: string
        description: Nombre o nombres de pila
        example: "Juan Carlos"
      lastname_1:
        type: string
        description: Apellido paterno
        example: "López"
      lastname_2:
        type: string
        description: Apellido materno
        example: "Carrasco"
      gender:
        type: string
        enum: ["M", "F", "N"]
        description: |
          Sexo de la persona
          * M: Masculino
          * F: Femenino
          * N: Otro / prefiere no responder
      birthday:
        type: string
        format: date
        description: Fecha de nacimiento
        example: "1977-1-14"
  User:
    type: object
    description: |
      Cliente **(Response)**

      * Este objeto representa tanto a una persona natural como a una empresa
      * Si el RUT es inferior a 50.000.000, corresponde a Persona Natural y `company_data` deberá ser `null`.
      * Si el RUT es igual o superior a 50.000.000, corresponde a Empresa y `company_data` es obligatorio
    allOf:
      - $ref: "#/definitions/UserBasicFields"
      - type: object
        required:
          - id 
          - rut
          - email
          - timestamps
          - global_status
        properties:
          id:
            type: integer
            description: Identificador interno. Campo read-only.
            example: 7783834
          rut:
            $ref: '#/definitions/Rut'
          cellphone:
            $ref: '#/definitions/CellPhone'
          email:
            $ref: '#/definitions/Email'
          company_data:
            $ref: "#/definitions/CompanyData"
          global_status:
            type: string
            enum:
              - pre-registro
              - activo
              - bloqueado
              - borrado
            description: |
              Estado del cliente. Campo read-only.
              * "pre-registro": cliente no posee password
              * "activo": cliente con password que puede transar
              * "bloqueado": cuenta temporalmente congelada
              * "borrado": eliminación lógica del cliente, no admite ningún cambio
          has_password:
            type: string
            description: |
              `"true"` si el usuario tiene `password`; `"false"` en otro caso
            example: "true"
          timestamps:
            $ref: '#/definitions/Timestamps'
  Rut:
    type: object
    description: |
      Identificador Chileno **(Response)**
    required:
      - status
      - timestamps
    properties:
      value:
        type: integer
        description: El rut sin puntos, guión, ni dígito verificador
        example: 14569484
      dv:
        type: string
        description: digito verificador
        example: "K"
      status:
        type: string
        enum:
          - no_validado
          - validado_srcei
          - validado_tef
        description: |
          Estado de validación del rut
          * no_validado: el rut no ha sido validado o las validaciones no han sido exitosas
          * validado_srcei: el rut fue validado exitosamente contra el registro civil
          * validado_tef: la validación más fuerte, ya que el usuario ha realizado un aviso de depósito seguido de una transferencia desde una cuenta correspondiente a su rut
      timestamps:
            $ref: '#/definitions/Timestamps'
  Email:
    type: object
    description: |
      Correo Electrónico **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      value:
        type: string
        format: email
        example: "pepito@gmail.com"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del email
          * no_validado: el email no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un correo de validación, pero el usuario no ha hecho clic en el link
          * validado: el usuario demostró tener acceso a la casilla haciendo clic en un link enviado a ésta
      timestamps:
            $ref: '#/definitions/Timestamps'
  CellPhone:
    type: object
    description: |
      Teléfono Celular **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      value:
        type: string
        description: Los 9 números que siguen a '+56'
        example: "912345678"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del celular
          * no_validado: el celular no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un sms de validación, pero el usuario no ha usado el código
          * validado: el usuario demostró tener acceso al celular usando el código enviado a éste
      timestamps:
        $ref: '#/definitions/Timestamps'
  CompanyData:
    type: object
    description: |
      Datos de la empresa a la que corresponde este Cliente **(Response)**
      
      **No se usa de manera independiente en la API**
    required:
      - status
      - timestamps
    properties:
      business_name:
        type: string
        description: Nombre legal de la empresa
        example: "Reparaciones Joselito Ltda."
      commercial_activity:
        type: integer
        example: 772
        description: ID del giro (ver /params/giros)
      status:
        type: string
        enum:
          - no_validado
          - validado_sii
        description: |
          Estado de validación de la razón social (business_name)
          * no_validado: la razón social no ha sido validada
          * validado_sii: la razón social fue validada mediante el SII
      timestamps:
            $ref: '#/definitions/Timestamps'
  Timestamps:
    type: object
    description: |
      Fecha de creación y de última modificación **(Response)**
      Componente de `Address`, `User`, `Rut` y otros objetos

      **No se usa de manera independiente en la API**
    properties:
      created_at:
        type: string
        format: date-time
        example: "2018-01-14T15:27:42.669Z"
      updated_at:
        type: string
        format: date-time
        example: "2018-03-02T10:03:12.123Z"
  ErrorObj:
    type: object
    description: Error que devuelve la api ante un `HTTP 422` **(Response)**
    required:
      - code
    properties:
      code:
        type: integer
        format: int32
        description: Código que representa el error. No será igual al código HTTP.
        example: 1024
      message:
        type: string
        description: Descripción corta del error
        example: "El cliente no pasó la validación"
      details:
        type: array
        items:
          $ref: '#/definitions/ErrorObjDetail'
  ErrorObjDetail:
    type: object
    description: |
      Cuando un error está compuesto por una lista de sub-errores, vendrán en este objeto
      Componente de `ErrorObj` **(Response)**
      
      **No se usa de manera independiente en la API**
    properties:
      code:
        type: integer
        format: int32
        description: Código que representa el sub-error
        example: 227
      message:
        type: string
        description: Descripción del sub-error
        example: "El nombre no puede estar vacío"